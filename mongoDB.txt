
1. 术语、概念
    let Schema = mongoose.Schema;
    let ObjectId = Schema.ObjectId;
    let schema = new Schema({
        title: 'string',
        task: String,
        id: 'number',   // 小写需要使用引号 
        fork: 'number',
        comments: String,
        hide: Boolean
    });
    let Task = mongoose.model('Task',schema);

    // Schema生成Model，Model创造Document

    // Schema用于定义数据库的结构，Schema不具备操作数据库的能力，每个Schema会映射到mongodb中的一个collection
    // Model是由Schema编译而成的构造器，具有抽象属性和行为，可以对数据库进行增删查改。
    // Model的每一个实例（instance）就是一个文档document

    [注意]  一定要将model()方法的第一个参数和其返回值设置为相同的值，否则会出现不可预知的结果


2. CURD方法
    2.1 创建document，有以下三种方法：

        save([callback])：
            model的实例的方法。接受一个可选的回调函数作为参数
                let doc1 = new Task({title: '测试1',fork: 3213,hide: false});
                doc1.save(function(err,doc){
                    console.log(doc.fork);  // 3213
                });

        create(doc1[,doc2,...][,callback])：
            可一次创建多个document，接受一个可选的回调函数作为参数
                Task.create({title: '测试1'},{title: '测试2'},function(err,doc1,doc2){
                    console.log(doc1);  // {__v:XXX, name: '测试1', __id: XXXXX}
                    console.log(doc2);  // {__v:XXX, name: '测试2', __id: XXXXX}
                });

        insertMany([doc1[,doc2,...]][,callback])：
            可一次创建多个document，接受一个可选的回调函数作为参数
                Task.insertMany([{title: '测试1'},{title: '测试2'}],function(err,docs){
                    // [{__v:XXX, name: '测试1', __id: XXXXX},
                    // {__v:XXX, name: '测试2', __id: XXXXX}]
                    console.log(docs);
                });

    2.2 查找document，有以下三种方法：
            find([conditions][,projection][,options][,callback])：
                第一个参数表示查询条件，
                第二个参数用于控制返回的字段，
                第三个参数用于配置查询参数，
                第四个参数是回调函数，回调函数的形式为function(err,docs){}
            例如：查找所以数据：
                Task.find(function(err,docs){
                    //[ { _id: 5971f93be6f98ec60e3dc86c, name: 'huochai', age: 27 },
                    //{ _id: 5971f93be6f98ec60e3dc86d, name: 'wang', age: 18 },
                    //{ _id: 5971f93be6f98ec60e3dc86e, name: 'huo', age: 30 },
                    //{ _id: 5971f93be6f98ec60e3dc86f, name: 'li', age: 12 } ]
                    console.log(docs);
                })

        // findById
        // findOne

    2.3 更新document，有以下几种方法：
            update(conditions, doc, [options], callback)
                第一个参数conditions为查询条件，
                第二个参数doc为需要修改的数据，
                第三个参数options为控制选项，
                第四个参数是回调函数
                　　options有如下选项:
                        safe (boolean)： 默认为true。安全模式。
                    　　upsert (boolean)： 默认为false。如果不存在则创建新记录。
                    　　multi (boolean)： 默认为false。是否更新多个查询记录。
                    　　runValidators： 如果值为true，执行Validation验证。
                    　　setDefaultsOnInsert： 如果upsert选项为true，在新建时插入文档定义的默认值。
                    　　strict (boolean)： 以strict模式进行更新。
                    　　overwrite (boolean)： 默认为false。禁用update-only模式，允许覆盖记录。
            例如：将所有name中含有 a 字符的数据的 age 改写为 10
                Task.update({name:/a/},{age: 10},{multi:true},function(err,raw){
                    //{ n: 2, nModified: 2, ok: 1 }
                    console.log(raw);
                })  

            [注意]  update方法中的回调函数不能省略，否则数据不会被更新。
                    如果回调函数里并没有什么有用的信息，则可以使用exec()简化代码
            例如：
                Task.update({name:/a/},{age: 10},{multi:true}).exec();

        // updateMany
                update方法的升级版，multi默认为true

        // find + save
        // updateOne
        // findOne + save
        // findByIdAndUpdate
        // fingOneAndUpdate

    2.4 删除，有以下几种方法：
        // remove 有以下两种形式：
                1. 删除模型: Model.remove(conditions,callback)
                        例如：删除所有name属性中包含'a'字符的记录
                            Task.remove({name:/a/}).exec()
                2. 删除文档: doc.remove([callback])

        // findOneAndRemove
        // findByIdAndRemove